#version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

#jobs:
  #hello-world: # Delete this job when you get started
    #docker:
    #  - image: amazon/aws-cli
    #steps:
    #  - checkout
    #  - run:
    #      name: Say Hello
    #      command: |
    #        echo "Hello World"

version: 2.1

orbs:
  slack: circleci/slack@4.2.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete files from bucket
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            # Delete front end stack
            aws cloudformation delete-stack --stack-name udacity-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            # Delete back end stack
            aws cloudformation delete-stack --stack-name udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            MIGRATION_RESULT=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_result)
            if(( ${MIGRATION_RESULT}==1 )); 
            then
              cd ~/project/backend
              npm install
              Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              exit 1
            fi



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "build-frontend"
          command: |
            cd frontend
            npm install
            npm run build
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "build-backend"
          command: |
            cd backend
            npm install
            npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: "test-frontend"
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: "test-backend"
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: "analyze-frontend"
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: "analyze-backend"
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name:  backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              URLS=$(aws ec2 describe-instances --region us-east-2 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text)
              echo "URLS=$URLS"
      - run:
          name: frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople      
  # get instance ip    
  get-instance-ip:
    environment:
      ID: arns3
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get backend ip address 
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> inventory
            
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)  
      - run:
          name: store the backend ip address to memstash so that frontend can use it. 
          command: |
            chmod 777 backendmemstash.sh
            ./backendmemstash.sh
            cat inventory             

#  configure-infrastructure:
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - add_ssh_keys:
          fingerprints: ["df:c3:e1:85:72:38:02:fb:7d:af:59:c6:90:da:c1:7b"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: 564ca3e8-c2c4-40a8-8510-84236d6ddf29" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
            echo "$URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            echo PWD
            pwd
            #ls -la
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd .circleci/ansible
            ansible-playbook -i inventory.txt main.yml
      

#  run-migrations:
  run-migrations:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: run db migration
          command: |
            cd backend
            npm install
            npm run migrations > migration.txt
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "" https://api.memstash.io/values/migration_key
            cat migration.txt
                     
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" migrations.txt; then 
              curl -H "Content-Type: text/plain" -H "token: 41becf56-e770-4630-a0e7-4f17f1d66667" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H "token: 41becf56-e770-4630-a0e7-4f17f1d66667" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            SUCCESS=$(curl -H "token: 41becf56-e770-4630-a0e7-4f17f1d66667" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo "${SUCCESS}" 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
       


#  deploy-frontend:
  deploy-frontend:
    docker:
    # docker image that supoorts AWS CLI
      - image: python:3.7-alpine3.11
    steps: 
      - checkout
      - run: 
          name: install dependencies 
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
            

      - run:
          name: Build the frontend
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            export API_URL="http://${PUBLIC_DNS}:3030"
            echo API_URL=${API_URL}
            cd frontend
            npm install
            npm run build
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive  

      - destroy-environment
     
             

#  deploy-backend:  
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["df:c3:e1:85:72:38:02:fb:7d:af:59:c6:90:da:c1:7b"]

      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli

      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: 46379a95-9d53-46f2-becb-d0e5c670441f" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
            echo "$URLS" >> inventory.txt
            cat inventory.txt      
            
      - run: 
          name: Deploy backend
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            tar -C backend -czvf artifact.tar.gz .
            ls -la
            ansible-galaxy install weareinteractive.environment
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - revert-migrations
      - destroy-environment  

      

                      
#  smoke-test:
  smoke-test: 
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: 
          name: install dependencies
          command: |
            apk add --update curl
            pip3 install awscli
      - run:
          name: smoke-test on frontend        
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.us-east-1.amazonaws.com/#/employees"            
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi   
      - run:
          name: Smoke-test on backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
          
            export API_URL=http://$BACKEND_IP:3030
            echo $API_URL >> frontend/.env
            echo $API_URL

      - destroy-environment         
#  cloudfront-update:
  production_deployment_and_clean_up:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: promote newly deployed app to production
          command: |
            aws cloudformation create-stack  \
              --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7} \
              --template-body file://./.circleci/files/cloudfront.yml \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags 'Key=project,Value=udapeople'
      - run:
          name: Wait for the cf stack to complete
          command : sleep 300         
      - run:
          name: perform cleanup
          command: |
            set TERM=xterm

            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --region ap-south-1 --no-paginate --output text)
            echo "Old Workflow Id 2nd time is ${OldWorkflowID}"

            if [ -n "${OldWorkflowID}" ]
            then
              echo "Empty old S3 bucket and delete old frontend stack"
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-prod-${OldWorkflowID}
              echo "Delete old backend stack"
              aws cloudformation delete-stack --stack-name udapeople-backend-prod-${OldWorkflowID} 
              echo "stack deleted succesfully"

            fi  
      - destroy-environment        

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [test-backend]
      - scan-frontend:
          requires: [test-frontend]
      - deploy-infrastructure:
          requires: [ scan-backend, scan-frontend]   
      - get-instance-ip:
          requires:
            - deploy-infrastructure     
      - configure-infrastructure:
          requires:
            - get-instance-ip      
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires: [run-migrations]      
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires:
            - deploy-frontend
            - deploy-backend    
      - production_deployment_and_clean_up:
          requires:
            - smoke-test
           
