#version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

#jobs:
  #hello-world: # Delete this job when you get started
    #docker:
    #  - image: amazon/aws-cli
    #steps:
    #  - checkout
    #  - run:
    #      name: Say Hello
    #      command: |
    #        echo "Hello World"

version: 2.1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "build-frontend"
          command: |
            cd frontend
            npm install
            npm run build
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "build-backend"
          command: |
            cd backend
            npm install
            npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: "test-frontend"
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: "test-backend"
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: "analyze-frontend"
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: "analyze-backend"
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name:  backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople      
  # get instance ip    
  get_instance_ip:
    environment:
      ID: arns3
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get backend ip address 
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> inventory
            
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)  
      - run:
          name: store the backend ip address to memstash so that frontend can use it. 
          command: |
            chmod 777 bkmemstash.sh
            ./bkmemstash.sh
            cat inventory             

#  configure-infrastructure:
    

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [test-backend]
      - scan-frontend:
          requires: [test-frontend]
      - deploy-infrastructure:
          requires: [ scan-backend, scan-frontend]   
      - get_instance_ip:
          requires:
            - deploy-infrastructure     
